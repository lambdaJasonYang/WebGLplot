{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\n\nenum DrawModeGL {\n  POINTS = 0x0000,\n  LINES = 0x0001,\n  LINE_LOOP = 0x0002,\n  LINE_STRIP = 0x0003,\n  TRIANGLES = 0x0004,\n  TRIANGLE_STRIP = 0x0005,\n  TRIANGLE_FAN = 0x0006\n};\n\nlet ptnum = -1\n\n\n\nconst range = (start: number,end :number,step : number) => {\n    const temp = [];\n    for(let i = start; i < end; i += step){\n        temp.push(i);\n    }\n    return temp;\n}\n\nconst filterInf = (x : number[]) => {\n    return x.filter(x => (x != Infinity && x != -Infinity));\n}\n\nconst median = (arr) => {\n  if (!arr.length) return undefined;\n  const s = [...arr].sort((a, b) => a - b);\n  const mid = Math.floor(s.length / 2);\n  return s.length % 2 === 0 ? ((s[mid - 1] + s[mid]) / 2) : s[mid];\n};\n\nconst normalize = (x) => {\n    const cleanx = filterInf(x);\n    const xnormed = 2/Math.max(...cleanx);\n    return xnormed\n}\n\nconst createPoints = (x: number[],y :number[]) => {\n    const cleanx : number[] = filterInf(x)\n    const cleany : number[] = filterInf(y)\n    console.log(\"cleanedpt\",cleanx,cleany)\n    const xnormed : number = 2/Math.max(...cleanx);\n    const ynormed : number = 2/Math.max(...cleany);\n    const ret : number[] = [];\n    for(let i = 0; i < x.length; i++){\n        ret[i*2] = x[i]*xnormed;\n        ret[(i*2)+1] = y[i]*ynormed;\n    }\n    ptnum = x.length;\n    return ret;\n}\n\n\n\n\n\nconst initBuffers = (gl: WebGL2RenderingContext, \n                     Plotfn : (x:number) => number,\n                     start: number = 30,\n                     end: number = 30,\n                     interpolation: number = 0.1) => {\n    const xdata = range(start,end,interpolation);\n    const ydata = xdata.map(Plotfn as (x:number) => number);\n    const positions = createPoints(xdata,ydata);    \n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n   \n    gl.bufferData(gl.ARRAY_BUFFER,\n                      new Float32Array(positions),\n                      gl.STATIC_DRAW);\n    return {\n          position: positionBuffer,\n        };\n}\n\nconst loadShader = (gl: WebGL2RenderingContext, type: number, source: string) => {\n        const shader : WebGLShader = gl.createShader(type as number);\n        // Send the source to the shader object\n        gl.shaderSource(shader, source as string);\n        gl.compileShader(shader);      \n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n          alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n          gl.deleteShader(shader);\n          return null;\n        }     \n        return shader;\n}\n\nconst initShaderProgram = (gl: WebGL2RenderingContext, vsSource: string, fsSource: string) : WebGLProgram => {\n        const vertexShader: WebGLShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n        const fragmentShader : WebGLShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n        // Create the shader program\n        const shaderProgram : WebGLProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n        // If creating the shader program failed, alert\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n          alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n          return null;\n        }\n        return shaderProgram;\n}\nconst drawScene= (gl: WebGL2RenderingContext, programInfo, buffers,delta, drawModeGL : number = gl.LINE_STRIP ) => {\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\n        gl.clearDepth(1.0);                 // Clear everything\n        gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n        gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n      \n        // Clear the canvas before we start drawing on it.\n      \n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      \n        // Create a perspective matrix, a special matrix that is\n        // used to simulate the distortion of perspective in a camera.\n        // Our field of view is 45 degrees, with a width/height\n        // ratio that matches the display size of the canvas\n        // and we only want to see objects between 0.1 units\n        // and 100 units away from the camera.\n      \n        const fieldOfView = 45 * Math.PI / 180;   // in radians\n        if(!(gl.canvas instanceof  HTMLCanvasElement )) throw new TypeError(`canvas with type ${typeof(gl.canvas)} cannot extract height width`)\n        const canvasElem : HTMLCanvasElement = gl.canvas\n        const aspect = canvasElem.clientWidth / canvasElem.clientHeight;\n        const zNear = 0.1;\n        const zFar = 100.0;\n        console.log(mat4)\n        const projectionMatrix = mat4.create();\n      \n        // note: glmatrix.js always has the first argument\n        // as the destination to receive the result.\n        mat4.perspective(projectionMatrix,\n                         fieldOfView,\n                         aspect,\n                         zNear,\n                         zFar);\n      \n        // Set the drawing position to the \"identity\" point, which is\n        // the center of the scene.\n        const modelViewMatrix = mat4.create();\n      \n        // Now move the drawing position a bit to where we want to\n        // start drawing the square.\n      \n        mat4.translate(modelViewMatrix,     // destination matrix\n                       modelViewMatrix,     // matrix to translate\n                       [-0.0, 0.0, -6.0]);  // amount to translate\n        mat4.rotate(modelViewMatrix,  // destination matrix\n              modelViewMatrix,  // matrix to rotate\n              delta,   // amount to rotate in radians\n              [0, 0, 1]);       // axis to rotate around\n      \n        // Tell WebGL how to pull out the positions from the position\n        // buffer into the vertexPosition attribute.\n        {\n          const numComponents = 2;\n          const type = gl.FLOAT;\n          const normalize = false;\n          const stride = 0;\n          const offset = 0;\n          gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n          gl.vertexAttribPointer(\n              programInfo.attribLocations.vertexPosition,\n              numComponents,\n              type,\n              normalize,\n              stride,\n              offset);\n          gl.enableVertexAttribArray(\n              programInfo.attribLocations.vertexPosition);\n        }\n      \n        // Tell WebGL to use our program when drawing\n      \n        gl.useProgram(programInfo.program);\n      \n        // Set the shader uniforms\n      \n        gl.uniformMatrix4fv(\n            programInfo.uniformLocations.projectionMatrix,\n            false,\n            projectionMatrix);\n        gl.uniformMatrix4fv(\n            programInfo.uniformLocations.modelViewMatrix,\n            false,\n            modelViewMatrix);\n      \n        {\n          const offset = 0;\n          const vertexCount = 4;\n        //   gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\n        // type glSHAPES = gl.LINE_STRIP\n          gl.drawArrays(drawModeGL,0,ptnum)\n        //   gl.drawArrays(gl.TRIANGLE_STRIP,0,ptnum)\n        }\n}\n\n\n\n\n  const fsSource : string = `\n  void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n  }`;\n  const vsSource : string = `\n  attribute vec4 aVertexPosition;\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n  void main() {\n      gl_PointSize = 1.0;\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n  }`;\n\n\n\n\n\n\nconst buildPlotWebGL = (target : HTMLCanvasElement,\n                        Plotfn : (x:number) => number,\n                        start: number = -30,\n                        end: number = 30,\n                        interpolation: number = 0.1, \n                        drawModeGL : DrawModeGL = DrawModeGL.POINTS,\n                        CanvasWidth : number = 400, \n                        CanvasHeight: number = 400) => {\n  \n  target.width = CanvasWidth \n  target.height = CanvasHeight \n  \n  const gl: WebGL2RenderingContext = target.getContext('webgl2');\n  const shaderProgram = initShaderProgram(gl,vsSource,fsSource)\n  const programInfo = {\n      program: shaderProgram as WebGLProgram,\n      attribLocations: {\n        vertexPosition: gl.getAttribLocation(shaderProgram as WebGLProgram, 'aVertexPosition'),\n      },\n      uniformLocations: {\n        projectionMatrix: gl.getUniformLocation(shaderProgram as WebGLProgram, 'uProjectionMatrix'),\n        modelViewMatrix: gl.getUniformLocation(shaderProgram as WebGLProgram, 'uModelViewMatrix'),\n      },\n    };\n    const buffers = initBuffers(gl,Plotfn,start,end,interpolation);\n    const delta = 0.0;\n    drawScene(gl, programInfo, buffers,delta,drawModeGL);\n}\n\n\n\n\nexport {buildPlotWebGL, DrawModeGL} ;\n\n"]}